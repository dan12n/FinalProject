// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   ymh15@EEWS305-001
//  Generated date: Sat May 07 15:52:29 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    blue_detect_core
// ------------------------------------------------------------------


module blue_detect_core (
  clk, en, arst_n, vga_xy_rsc_mgc_in_wire_d, detected_blue_rsc_mgc_out_stdreg_d,
      x_blue_rsc_mgc_out_stdreg_d, video_in_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  output detected_blue_rsc_mgc_out_stdreg_d;
  output [9:0] x_blue_rsc_mgc_out_stdreg_d;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [9:0] blue_x_1_sva_dfm_mx0;
  reg [9:0] reg_video_out_rsc_mgc_out_stdreg_d_tmp;
  reg [9:0] reg_video_out_rsc_mgc_out_stdreg_d_tmp_1;
  reg [9:0] reg_video_out_rsc_mgc_out_stdreg_d_tmp_2;
  reg [9:0] reg_blue_x_1_sva_cse;
  reg reg_detected_blue_rsc_mgc_out_stdreg_d_cse;
  wire [8:0] if_1_acc_1_itm;
  wire [9:0] nl_if_1_acc_1_itm;
  wire [8:0] if_1_acc_itm;
  wire [9:0] nl_if_1_acc_itm;
  wire [7:0] if_acc_itm;
  wire [8:0] nl_if_acc_itm;
  wire [10:0] acc_1_itm;
  wire [11:0] nl_acc_1_itm;
  wire land_3_lpi_1_dfm;


  // Interconnect Declarations for Component Instantiations 
  assign video_out_rsc_mgc_out_stdreg_d = {reg_video_out_rsc_mgc_out_stdreg_d_tmp
      , reg_video_out_rsc_mgc_out_stdreg_d_tmp_1 , reg_video_out_rsc_mgc_out_stdreg_d_tmp_2};
  assign x_blue_rsc_mgc_out_stdreg_d = reg_blue_x_1_sva_cse;
  assign detected_blue_rsc_mgc_out_stdreg_d = reg_detected_blue_rsc_mgc_out_stdreg_d_cse;
  assign blue_x_1_sva_dfm_mx0 = MUX_v_10_2_2({(vga_xy_rsc_mgc_in_wire_d[9:0]) , reg_blue_x_1_sva_cse},
      (~((acc_1_itm[10]) & (if_1_acc_itm[8]) & (if_1_acc_1_itm[8]))) | ((~ (if_acc_itm[7]))
      & reg_detected_blue_rsc_mgc_out_stdreg_d_cse));
  assign nl_if_1_acc_1_itm = conv_u2u_8_9(video_in_rsc_mgc_in_wire_d[19:12]) + 9'b110110101;
  assign if_1_acc_1_itm = nl_if_1_acc_1_itm[8:0];
  assign nl_if_1_acc_itm = conv_u2u_8_9(video_in_rsc_mgc_in_wire_d[29:22]) + 9'b110110101;
  assign if_1_acc_itm = nl_if_1_acc_itm[8:0];
  assign land_3_lpi_1_dfm = (readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(blue_x_1_sva_dfm_mx0)
      + conv_u2u_10_11(~ (vga_xy_rsc_mgc_in_wire_d[9:0]))) + 12'b101111101101)))
      & (readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(vga_xy_rsc_mgc_in_wire_d[9:0])
      + conv_u2u_10_11(~ blue_x_1_sva_dfm_mx0)) + 12'b101111101101)));
  assign nl_if_acc_itm = conv_u2u_7_8(vga_xy_rsc_mgc_in_wire_d[19:13]) + 8'b11111011;
  assign if_acc_itm = nl_if_acc_itm[7:0];
  assign nl_acc_1_itm = ({1'b1 , (~ (video_in_rsc_mgc_in_wire_d[9:0]))}) + 11'b100101101;
  assign acc_1_itm = nl_acc_1_itm[10:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_blue_x_1_sva_cse <= 10'b0;
      reg_detected_blue_rsc_mgc_out_stdreg_d_cse <= 1'b0;
      reg_video_out_rsc_mgc_out_stdreg_d_tmp <= 10'b0;
      reg_video_out_rsc_mgc_out_stdreg_d_tmp_1 <= 10'b0;
      reg_video_out_rsc_mgc_out_stdreg_d_tmp_2 <= 10'b0;
    end
    else begin
      if ( en ) begin
        reg_blue_x_1_sva_cse <= blue_x_1_sva_dfm_mx0;
        reg_detected_blue_rsc_mgc_out_stdreg_d_cse <= (reg_detected_blue_rsc_mgc_out_stdreg_d_cse
            & (~ (if_acc_itm[7]))) | ((if_1_acc_1_itm[8]) & (if_1_acc_itm[8]) & (acc_1_itm[10]));
        reg_video_out_rsc_mgc_out_stdreg_d_tmp <= (video_in_rsc_mgc_in_wire_d[29:20])
            & (signext_10_1(~ land_3_lpi_1_dfm));
        reg_video_out_rsc_mgc_out_stdreg_d_tmp_1 <= (video_in_rsc_mgc_in_wire_d[19:10])
            & (signext_10_1(~ land_3_lpi_1_dfm));
        reg_video_out_rsc_mgc_out_stdreg_d_tmp_2 <= (video_in_rsc_mgc_in_wire_d[9:0])
            | ({{9{land_3_lpi_1_dfm}}, land_3_lpi_1_dfm});
      end
    end
  end

  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    blue_detect
//  Generated from file(s):
//    2) C:/git/student_files_2015/student_files_2015/prj2/catapult_proj/vga_mouse/blue_detect.c
// ------------------------------------------------------------------


module blue_detect (
  vga_xy_rsc_z, detected_blue_rsc_z, x_blue_rsc_z, video_in_rsc_z, video_out_rsc_z,
      clk, en, arst_n
);
  input [19:0] vga_xy_rsc_z;
  output detected_blue_rsc_z;
  output [9:0] x_blue_rsc_z;
  input [29:0] video_in_rsc_z;
  output [29:0] video_out_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire detected_blue_rsc_mgc_out_stdreg_d;
  wire [9:0] x_blue_rsc_mgc_out_stdreg_d;
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(1)) detected_blue_rsc_mgc_out_stdreg (
      .d(detected_blue_rsc_mgc_out_stdreg_d),
      .z(detected_blue_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(10)) x_blue_rsc_mgc_out_stdreg (
      .d(x_blue_rsc_mgc_out_stdreg_d),
      .z(x_blue_rsc_z)
    );
  mgc_in_wire #(.rscid(4),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  blue_detect_core blue_detect_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .detected_blue_rsc_mgc_out_stdreg_d(detected_blue_rsc_mgc_out_stdreg_d),
      .x_blue_rsc_mgc_out_stdreg_d(x_blue_rsc_mgc_out_stdreg_d),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d)
    );
endmodule



