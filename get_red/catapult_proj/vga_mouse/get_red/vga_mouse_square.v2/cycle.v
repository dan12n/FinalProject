// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   ymh15@EEWS104A-014
//  Generated date: Wed May 11 11:41:38 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    vga_mouse_square_core
// ------------------------------------------------------------------


module vga_mouse_square_core (
  clk, en, arst_n, vga_xy_rsc_mgc_in_wire_d, red_left_x_rsc_mgc_out_stdreg_d, red_right_x_rsc_mgc_out_stdreg_d,
      y_red_rsc_mgc_out_stdreg_d, video_in_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  output [9:0] red_left_x_rsc_mgc_out_stdreg_d;
  reg [9:0] red_left_x_rsc_mgc_out_stdreg_d;
  output [9:0] red_right_x_rsc_mgc_out_stdreg_d;
  reg [9:0] red_right_x_rsc_mgc_out_stdreg_d;
  output [9:0] y_red_rsc_mgc_out_stdreg_d;
  reg [9:0] y_red_rsc_mgc_out_stdreg_d;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;
  reg [29:0] video_out_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [9:0] left_red_x_1_sva;
    reg [9:0] right_red_x_1_sva;
    reg [9:0] red_y_1_sva;
    reg detected_red_left_1_sva;
    reg detected_red_right_1_sva;
    reg [29:0] io_read_video_in_rsc_d_cse_sva;
    reg [19:0] io_read_vga_xy_rsc_d_cse_sva;
    reg land_lpi_1_dfm;
    reg if_slc_svs;
    reg if_land_1_sva_1;
    reg if_land_1_lpi_1_dfm;
    reg if_land_sva_1;
    reg if_land_lpi_1_dfm;
    reg else_1_land_lpi_1_dfm;
    reg else_1_if_slc_svs;
    reg else_1_if_land_1_sva_1;
    reg else_1_if_land_1_lpi_1_dfm;
    reg else_1_if_land_sva_1;
    reg else_1_if_land_lpi_1_dfm;
    reg [9:0] left_red_x_1_sva_dfm_1;
    reg [9:0] right_red_x_1_sva_dfm_2;
    reg slc_1_svs;
    reg land_2_sva_1;
    reg land_2_lpi_1_dfm;
    reg oelse_slc_svs;
    reg oelse_land_sva_1;
    reg lor_lpi_1_dfm;
    reg aif_16_slc_svs;
    reg aif_16_land_sva_1;
    reg land_1_lpi_1_dfm;
    reg else_4_slc_svs;
    reg else_4_land_1_sva_1;
    reg else_4_land_1_lpi_1_dfm;
    reg else_4_land_sva_1;
    reg else_4_land_lpi_1_dfm;
    reg [9:0] o_red_lpi_1_dfm;
    reg [9:0] o_green_lpi_1_dfm;
    reg [9:0] o_blue_lpi_1_dfm;
    reg [29:0] io_read_video_in_rsc_d_cse_sva_1;
    reg [9:0] left_red_x_1_sva_dfm_2;
    reg [9:0] right_red_x_1_sva_dfm_3;
    reg [9:0] red_y_1_sva_dfm_2;
    reg lor_lpi_1_dfm_1;
    reg lor_lpi_1_dfm_st_1;
    reg main_stage_0_2;
    reg [9:0] io_read_vga_xy_rsc_d_cse_sva_1_sg1;
    reg and_1_cse;

    reg[0:0] else_1_mux_3_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        left_red_x_1_sva = 10'b0;
        right_red_x_1_sva = 10'b0;
        red_y_1_sva = 10'b0;
        detected_red_left_1_sva = 1'b0;
        detected_red_right_1_sva = 1'b0;
        main_stage_0_2 = 1'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            if ( main_stage_0_2 ) begin
              o_blue_lpi_1_dfm = 10'b0;
              o_green_lpi_1_dfm = 10'b0;
              o_red_lpi_1_dfm = 10'b0;
              else_4_land_sva_1 = 1'b0;
              else_4_land_1_sva_1 = 1'b0;
              aif_16_land_sva_1 = 1'b0;
              if ( lor_lpi_1_dfm_st_1 ) begin
                aif_16_slc_svs = readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(io_read_vga_xy_rsc_d_cse_sva_1_sg1)
                    + conv_u2u_10_11(~ red_y_1_sva_dfm_2)) + 12'b101111111111));
                if ( aif_16_slc_svs ) begin
                  aif_16_land_sva_1 = readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(red_y_1_sva_dfm_2)
                      + conv_u2u_10_11(~ io_read_vga_xy_rsc_d_cse_sva_1_sg1)) + 12'b101111111111));
                end
              end
              land_1_lpi_1_dfm = aif_16_land_sva_1 & aif_16_slc_svs & lor_lpi_1_dfm_1;
              if ( land_1_lpi_1_dfm ) begin
              end
              else begin
                else_4_slc_svs = readslicef_11_1_10((({1'b1 , (~ (io_read_video_in_rsc_d_cse_sva_1[29:20]))})
                    + 11'b1001011001));
                if ( else_4_slc_svs ) begin
                  else_4_land_1_sva_1 = readslicef_10_1_9((conv_u2u_9_10(io_read_video_in_rsc_d_cse_sva_1[9:1])
                      + 10'b1101010001));
                end
                else_4_land_1_lpi_1_dfm = else_4_land_1_sva_1 & else_4_slc_svs;
                if ( else_4_land_1_lpi_1_dfm ) begin
                  else_4_land_sva_1 = readslicef_10_1_9((conv_u2u_9_10(io_read_video_in_rsc_d_cse_sva_1[19:11])
                      + 10'b1101010001));
                end
                else_4_land_lpi_1_dfm = else_4_land_sva_1 & else_4_land_1_lpi_1_dfm;
                o_red_lpi_1_dfm = (io_read_video_in_rsc_d_cse_sva_1[29:20]) & (signext_10_1(~
                    else_4_land_lpi_1_dfm));
                o_green_lpi_1_dfm = (io_read_video_in_rsc_d_cse_sva_1[19:10]) | ({{9{else_4_land_lpi_1_dfm}},
                    else_4_land_lpi_1_dfm});
                o_blue_lpi_1_dfm = (io_read_video_in_rsc_d_cse_sva_1[9:0]) | ({{9{else_4_land_lpi_1_dfm}},
                    else_4_land_lpi_1_dfm});
              end
              red_left_x_rsc_mgc_out_stdreg_d <= left_red_x_1_sva_dfm_2;
              red_right_x_rsc_mgc_out_stdreg_d <= right_red_x_1_sva_dfm_3;
              y_red_rsc_mgc_out_stdreg_d <= red_y_1_sva_dfm_2;
              video_out_rsc_mgc_out_stdreg_d <= {(o_red_lpi_1_dfm | ({{9{land_1_lpi_1_dfm}},
                  land_1_lpi_1_dfm})) , (o_green_lpi_1_dfm & (signext_10_1(~ land_1_lpi_1_dfm)))
                  , (o_blue_lpi_1_dfm | ({{9{land_1_lpi_1_dfm}}, land_1_lpi_1_dfm}))};
              left_red_x_1_sva = left_red_x_1_sva_dfm_2;
              right_red_x_1_sva = right_red_x_1_sva_dfm_3;
              red_y_1_sva = red_y_1_sva_dfm_2;
            end
            else_1_land_lpi_1_dfm = 1'b0;
            if_land_lpi_1_dfm = 1'b0;
            else_1_if_land_lpi_1_dfm = 1'b0;
            oelse_land_sva_1 = 1'b0;
            land_2_sva_1 = 1'b0;
            else_1_if_land_sva_1 = 1'b0;
            else_1_if_land_1_sva_1 = 1'b0;
            if_land_sva_1 = 1'b0;
            if_land_1_sva_1 = 1'b0;
            io_read_video_in_rsc_d_cse_sva = video_in_rsc_mgc_in_wire_d;
            io_read_vga_xy_rsc_d_cse_sva = vga_xy_rsc_mgc_in_wire_d;
            land_lpi_1_dfm = (~ detected_red_left_1_sva) & (readslicef_9_1_8((conv_u2u_8_9(io_read_vga_xy_rsc_d_cse_sva[9:2])
                + 9'b110110101)));
            if ( land_lpi_1_dfm ) begin
              if_slc_svs = readslicef_11_1_10((({1'b1 , (~ (io_read_video_in_rsc_d_cse_sva[29:20]))})
                  + 11'b1001011001));
              if ( if_slc_svs ) begin
                if_land_1_sva_1 = readslicef_10_1_9((conv_u2u_9_10(io_read_video_in_rsc_d_cse_sva[9:1])
                    + 10'b1101010001));
              end
              if_land_1_lpi_1_dfm = if_land_1_sva_1 & if_slc_svs;
              if ( if_land_1_lpi_1_dfm ) begin
                if_land_sva_1 = readslicef_10_1_9((conv_u2u_9_10(io_read_video_in_rsc_d_cse_sva[19:11])
                    + 10'b1101010001));
              end
              if_land_lpi_1_dfm = if_land_sva_1 & if_land_1_lpi_1_dfm;
            end
            else begin
              else_1_land_lpi_1_dfm = (~ detected_red_right_1_sva) & (readslicef_11_1_10((({1'b1
                  , (~ (io_read_vga_xy_rsc_d_cse_sva[9:0]))}) + 11'b1001011001)));
              if ( else_1_land_lpi_1_dfm ) begin
                else_1_if_slc_svs = readslicef_11_1_10((({1'b1 , (~ (io_read_video_in_rsc_d_cse_sva[29:20]))})
                    + 11'b1001011001));
                if ( else_1_if_slc_svs ) begin
                  else_1_if_land_1_sva_1 = readslicef_10_1_9((conv_u2u_9_10(io_read_video_in_rsc_d_cse_sva[9:1])
                      + 10'b1101010001));
                end
                else_1_if_land_1_lpi_1_dfm = else_1_if_land_1_sva_1 & else_1_if_slc_svs;
                if ( else_1_if_land_1_lpi_1_dfm ) begin
                  else_1_if_land_sva_1 = readslicef_10_1_9((conv_u2u_9_10(io_read_video_in_rsc_d_cse_sva[19:11])
                      + 10'b1101010001));
                end
                else_1_if_land_lpi_1_dfm = else_1_if_land_sva_1 & else_1_if_land_1_lpi_1_dfm;
              end
            end
            and_1_cse = if_land_lpi_1_dfm & land_lpi_1_dfm;
            left_red_x_1_sva_dfm_1 = MUX_v_10_2_2({left_red_x_1_sva , (io_read_vga_xy_rsc_d_cse_sva[9:0])},
                and_1_cse);
            right_red_x_1_sva_dfm_2 = MUX_v_10_2_2({right_red_x_1_sva , (io_read_vga_xy_rsc_d_cse_sva[9:0])},
                else_1_if_land_lpi_1_dfm & else_1_land_lpi_1_dfm & (~ land_lpi_1_dfm));
            slc_1_svs = readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(io_read_vga_xy_rsc_d_cse_sva[9:0])
                + conv_u2u_10_11(~ left_red_x_1_sva_dfm_1)) + 12'b101111111111));
            if ( slc_1_svs ) begin
              land_2_sva_1 = readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(left_red_x_1_sva_dfm_1)
                  + conv_u2u_10_11(~ (io_read_vga_xy_rsc_d_cse_sva[9:0]))) + 12'b101111111111));
            end
            land_2_lpi_1_dfm = land_2_sva_1 & slc_1_svs;
            if ( land_2_lpi_1_dfm ) begin
            end
            else begin
              oelse_slc_svs = readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(io_read_vga_xy_rsc_d_cse_sva[9:0])
                  + conv_u2u_10_11(~ right_red_x_1_sva_dfm_2)) + 12'b101111111111));
              if ( oelse_slc_svs ) begin
                oelse_land_sva_1 = readslicef_12_1_11((conv_u2s_11_12(conv_u2u_10_11(right_red_x_1_sva_dfm_2)
                    + conv_u2u_10_11(~ (io_read_vga_xy_rsc_d_cse_sva[9:0]))) + 12'b101111111111));
              end
            end
            lor_lpi_1_dfm = (oelse_land_sva_1 & oelse_slc_svs) | land_2_lpi_1_dfm;
            detected_red_left_1_sva = MUX_s_1_2_2({detected_red_left_1_sva , (detected_red_left_1_sva
                | if_land_lpi_1_dfm)}, land_lpi_1_dfm);
            else_1_mux_3_nl = MUX_s_1_2_2({detected_red_right_1_sva , (detected_red_right_1_sva
                | else_1_if_land_lpi_1_dfm)}, else_1_land_lpi_1_dfm);
            detected_red_right_1_sva = MUX_s_1_2_2({(else_1_mux_3_nl) , detected_red_right_1_sva},
                land_lpi_1_dfm);
            io_read_video_in_rsc_d_cse_sva_1 = io_read_video_in_rsc_d_cse_sva;
            io_read_vga_xy_rsc_d_cse_sva_1_sg1 = io_read_vga_xy_rsc_d_cse_sva[19:10];
            left_red_x_1_sva_dfm_2 = left_red_x_1_sva_dfm_1;
            right_red_x_1_sva_dfm_3 = right_red_x_1_sva_dfm_2;
            red_y_1_sva_dfm_2 = MUX_v_10_2_2({red_y_1_sva , (io_read_vga_xy_rsc_d_cse_sva[19:10])},
                and_1_cse);
            lor_lpi_1_dfm_1 = lor_lpi_1_dfm;
            lor_lpi_1_dfm_st_1 = lor_lpi_1_dfm;
            main_stage_0_2 = 1'b1;
          end
        end
      end
    end
    and_1_cse = 1'b0;
    io_read_vga_xy_rsc_d_cse_sva_1_sg1 = 10'b0;
    main_stage_0_2 = 1'b0;
    lor_lpi_1_dfm_st_1 = 1'b0;
    lor_lpi_1_dfm_1 = 1'b0;
    red_y_1_sva_dfm_2 = 10'b0;
    right_red_x_1_sva_dfm_3 = 10'b0;
    left_red_x_1_sva_dfm_2 = 10'b0;
    io_read_video_in_rsc_d_cse_sva_1 = 30'b0;
    o_blue_lpi_1_dfm = 10'b0;
    o_green_lpi_1_dfm = 10'b0;
    o_red_lpi_1_dfm = 10'b0;
    else_4_land_lpi_1_dfm = 1'b0;
    else_4_land_sva_1 = 1'b0;
    else_4_land_1_lpi_1_dfm = 1'b0;
    else_4_land_1_sva_1 = 1'b0;
    else_4_slc_svs = 1'b0;
    land_1_lpi_1_dfm = 1'b0;
    aif_16_land_sva_1 = 1'b0;
    aif_16_slc_svs = 1'b0;
    lor_lpi_1_dfm = 1'b0;
    oelse_land_sva_1 = 1'b0;
    oelse_slc_svs = 1'b0;
    land_2_lpi_1_dfm = 1'b0;
    land_2_sva_1 = 1'b0;
    slc_1_svs = 1'b0;
    right_red_x_1_sva_dfm_2 = 10'b0;
    left_red_x_1_sva_dfm_1 = 10'b0;
    else_1_if_land_lpi_1_dfm = 1'b0;
    else_1_if_land_sva_1 = 1'b0;
    else_1_if_land_1_lpi_1_dfm = 1'b0;
    else_1_if_land_1_sva_1 = 1'b0;
    else_1_if_slc_svs = 1'b0;
    else_1_land_lpi_1_dfm = 1'b0;
    if_land_lpi_1_dfm = 1'b0;
    if_land_sva_1 = 1'b0;
    if_land_1_lpi_1_dfm = 1'b0;
    if_land_1_sva_1 = 1'b0;
    if_slc_svs = 1'b0;
    land_lpi_1_dfm = 1'b0;
    io_read_vga_xy_rsc_d_cse_sva = 20'b0;
    io_read_video_in_rsc_d_cse_sva = 30'b0;
    detected_red_right_1_sva = 1'b0;
    detected_red_left_1_sva = 1'b0;
    red_y_1_sva = 10'b0;
    right_red_x_1_sva = 10'b0;
    left_red_x_1_sva = 10'b0;
    video_out_rsc_mgc_out_stdreg_d <= 30'b0;
    y_red_rsc_mgc_out_stdreg_d <= 10'b0;
    red_right_x_rsc_mgc_out_stdreg_d <= 10'b0;
    red_left_x_rsc_mgc_out_stdreg_d <= 10'b0;
  end


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    vga_mouse_square
//  Generated from file(s):
//    2) $PROJECT_HOME/vga_mouse_square.c
// ------------------------------------------------------------------


module vga_mouse_square (
  vga_xy_rsc_z, red_left_x_rsc_z, red_right_x_rsc_z, y_red_rsc_z, video_in_rsc_z,
      video_out_rsc_z, clk, en, arst_n
);
  input [19:0] vga_xy_rsc_z;
  output [9:0] red_left_x_rsc_z;
  output [9:0] red_right_x_rsc_z;
  output [9:0] y_red_rsc_z;
  input [29:0] video_in_rsc_z;
  output [29:0] video_out_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire [9:0] red_left_x_rsc_mgc_out_stdreg_d;
  wire [9:0] red_right_x_rsc_mgc_out_stdreg_d;
  wire [9:0] y_red_rsc_mgc_out_stdreg_d;
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(10)) red_left_x_rsc_mgc_out_stdreg (
      .d(red_left_x_rsc_mgc_out_stdreg_d),
      .z(red_left_x_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(10)) red_right_x_rsc_mgc_out_stdreg (
      .d(red_right_x_rsc_mgc_out_stdreg_d),
      .z(red_right_x_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) y_red_rsc_mgc_out_stdreg (
      .d(y_red_rsc_mgc_out_stdreg_d),
      .z(y_red_rsc_z)
    );
  mgc_in_wire #(.rscid(5),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  vga_mouse_square_core vga_mouse_square_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .red_left_x_rsc_mgc_out_stdreg_d(red_left_x_rsc_mgc_out_stdreg_d),
      .red_right_x_rsc_mgc_out_stdreg_d(red_right_x_rsc_mgc_out_stdreg_d),
      .y_red_rsc_mgc_out_stdreg_d(y_red_rsc_mgc_out_stdreg_d),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d)
    );
endmodule



